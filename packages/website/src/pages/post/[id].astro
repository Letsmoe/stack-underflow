---
import { query } from "../../database";
import CommentSection from "../../components/CommentSection.astro";
import PostLayout from "../../layouts/PostLayout.astro";
import BookmarkButton from "../../components/BookmarkButton.svelte";
import { isBookmarked } from "../../lib/Bookmarks";

const { id } = Astro.params;
const db = Astro.url.searchParams.get("db") || "";

if (!id || !db) {
	Astro.redirect("/");
}

const result = await query(
	`SELECT 
	posts.*,
  json_agg(comments.*) AS all_comments
	FROM posts
	LEFT JOIN comments ON posts.id = comments.postId WHERE posts.id = $1
	GROUP BY posts.id;`,
	[id],
	db
);
const row = result.rows[0];

let responses = (
	await query(
		`SELECT 
	posts.*,
  json_agg(comments.*) AS all_comments
	FROM posts
	LEFT JOIN comments ON posts.id = comments.postId WHERE posts.parentId = $1
	GROUP BY posts.id;`,
		[row.id],
		db
	)
).rows;

const comments = row.all_comments.filter((x: any) => x);
const bookmarked = isBookmarked(parseInt(id as string));
---

<PostLayout title="Post">
	<div class="max-w-[1200px] mx-auto flex flex-col gap-4">
		<div
			class="border rounded-lg p-6 border-dark-blue markdown-body bg-secondary">
			<h1 class="text-3xl font-medium mb-6">{row.title}</h1>
			<article
				set:html={row.body}
				class="text-lg"
			/>
			<span class="rounded-lg bg-green-600 px-2 py-1 text-sm text-secondary font-bold">Score: {row.score}</span>
		</div>
		<CommentSection comments={comments} />
		{
			responses.map((response) => (
				<div class="flex flex-col gap-4">
					<div class="border rounded-lg p-6 border-dark-blue markdown-body bg-secondary">
						{response.id == row.acceptedanswerid && <div class="flex gap-4 items-center mb-8">
						<svg
							width="50"
							height="50"
							viewBox="0 0 15 15"
							fill="none"
							xmlns="http://www.w3.org/2000/svg">
							<path
								d="M7.49991 0.877045C3.84222 0.877045 0.877075 3.84219 0.877075 7.49988C0.877075 11.1575 3.84222 14.1227 7.49991 14.1227C11.1576 14.1227 14.1227 11.1575 14.1227 7.49988C14.1227 3.84219 11.1576 0.877045 7.49991 0.877045ZM1.82708 7.49988C1.82708 4.36686 4.36689 1.82704 7.49991 1.82704C10.6329 1.82704 13.1727 4.36686 13.1727 7.49988C13.1727 10.6329 10.6329 13.1727 7.49991 13.1727C4.36689 13.1727 1.82708 10.6329 1.82708 7.49988ZM10.1589 5.53774C10.3178 5.31191 10.2636 5.00001 10.0378 4.84109C9.81194 4.68217 9.50004 4.73642 9.34112 4.96225L6.51977 8.97154L5.35681 7.78706C5.16334 7.59002 4.84677 7.58711 4.64973 7.78058C4.45268 7.97404 4.44978 8.29061 4.64325 8.48765L6.22658 10.1003C6.33054 10.2062 6.47617 10.2604 6.62407 10.2483C6.77197 10.2363 6.90686 10.1591 6.99226 10.0377L10.1589 5.53774Z"
								fill=""
								class="fill-green-400"
								fill-rule="evenodd"
								clip-rule="evenodd"
							/>
						</svg>
						<h3 class="font-medium text-xl">Accepted Answer</h3>
					</div>}
						<article
							set:html={response.body}
							class="text-lg"
						/>
						<span class="rounded-lg bg-green-600 px-2 py-1 text-sm text-secondary font-bold">Score: {response.score}</span>
					</div>
					<CommentSection
						comments={response.all_comments.filter((x: any) => x)}
					/>
				</div>
			))
		}
	</div>
	<BookmarkButton
		bookmarked={bookmarked}
		pageId={id}
		client:load
	/>
</PostLayout>